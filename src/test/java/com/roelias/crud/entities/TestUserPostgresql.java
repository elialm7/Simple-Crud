package com.roelias.crud.entities;

import com.fasterxml.jackson.databind.JsonNode;
import org.checkerframework.checker.units.qual.C;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static com.roelias.crud.CRUD.*;

@Table(value = "complex_entities", schema = "public", dialect =  Dialect.POSTGRESQL)
public class TestUserPostgresql {

    // Auto-generated primary key
    @Id(autoGenerated = true)
    private Long id;

    // Manual ID (for cases where you provide the ID)
     //@Id(autoGenerated = false)
    // private String customId;

    // Basic column mapping
    @Column("entity_name")
    private String name;

    // UUID auto-generation
    @UUID(autoGenerate = true)
    @Column("uuid_field")
    private java.util.UUID uuid;

    // Manual UUID (when you want to provide it)
    @UUID(autoGenerate = false)
    @Column("manual_uuid")
    private String manualuuid;

    // JSON serialization - supports Objects, Maps, JsonNode
    @JsonColumn
    @Column("preferences_json")
    private UserPreferences preferences;  // Custom object

    @JsonColumn
    private Map<String, Object> metadata;  // Map

    @JsonColumn
    @Column("raw_json")
    private JsonNode rawJson;  // JsonNode

    // Array handling
    @ArrayColumn(separator = ",")
    private List<String> tags;

    @ArrayColumn(separator = "|")
    private String[] categories;

    // Enum handling - STRING mode
    @EnumColumn(EnumColumn.EnumType.STRING)
    private Status status;

    // Enum handling - ORDINAL mode
    @EnumColumn(EnumColumn.EnumType.ORDINAL)
    private Priority priority;

    // Enum handling - CODE mode (requires getCode() method)
    @EnumColumn(EnumColumn.EnumType.CODE)
    private Department department;

    // File storage
    @FileColumn
    private byte[] document;

    // Default values
    @Default("true")
    private Boolean active;

    @Default("0")
    private Integer attempts;

    // Automatic timestamps
    @CreatedDate
    @Column("created_at")
    private LocalDateTime createdAt;

    @UpdatedDate
    @Column("updated_at")
    private LocalDateTime updatedAt;

    // Ignored field (not persisted)
    @Ignore
    private String temporaryField;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public java.util.UUID  getUuid() {
        return uuid;
    }

    public void setUuid(java.util.UUID uuid) {
        this.uuid = uuid;
    }

    public String getManualUuid() {
        return manualuuid;
    }

    public void setManualUuid(String manualUuid) {
        this.manualuuid = manualUuid;
    }

    public UserPreferences getPreferences() {
        return preferences;
    }

    public void setPreferences(UserPreferences preferences) {
        this.preferences = preferences;
    }

    public Map<String, Object> getMetadata() {
        return metadata;
    }

    public void setMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
    }

    public JsonNode getRawJson() {
        return rawJson;
    }

    public void setRawJson(JsonNode rawJson) {
        this.rawJson = rawJson;
    }

    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public String[] getCategories() {
        return categories;
    }

    public void setCategories(String[] categories) {
        this.categories = categories;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public Priority getPriority() {
        return priority;
    }

    public void setPriority(Priority priority) {
        this.priority = priority;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    public byte[] getDocument() {
        return document;
    }

    public void setDocument(byte[] document) {
        this.document = document;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Integer getAttempts() {
        return attempts;
    }

    public void setAttempts(Integer attempts) {
        this.attempts = attempts;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getTemporaryField() {
        return temporaryField;
    }

    public void setTemporaryField(String temporaryField) {
        this.temporaryField = temporaryField;
    }

    @Override
    public String toString() {
        return "TestUserPostgresql{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", uuid=" + uuid +
                ", manualuuid='" + manualuuid + '\'' +
                ", preferences=" + preferences +
                ", metadata=" + metadata +
                ", rawJson=" + rawJson +
                ", tags=" + tags +
                ", categories=" + Arrays.toString(categories) +
                ", status=" + status +
                ", priority=" + priority +
                ", department=" + department +
                ", document=" + Arrays.toString(document) +
                ", active=" + active +
                ", attempts=" + attempts +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                ", temporaryField='" + temporaryField + '\'' +
                '}';
    }
}
